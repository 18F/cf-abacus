'use strict';

// Service resource definition schema

var _ = require('underscore');

var schema = require('abacus-schema');

var clone = _.clone;
var extend = _.extend;

var string = schema.types.string;
var enumType = schema.types.enumType;
var object = schema.types.object;
var arrayOf = schema.types.arrayOf;

// Unit schema
var unit = object({
  name: string(),
  quantityType: enumType(['DELTA', 'CURRENT'])
}, ['name', 'quantityType']);

// Resource schema
var resource = object({
  name: string(),
  units: arrayOf(unit)
}, ['units']);

// AggregationGroup schema
var aggregationGroup = object({
  name: enumType(['daily', 'monthly'])
}, ['name']);

// Aggregation schema
var aggregation = object({
  id: string(),
  unit: string(),
  aggregationGroup: aggregationGroup,
  formula: {},
  accumulate: {},
  aggregate: {},
  rate: {}
}, ['id', 'unit', 'formula']);

// Export our public functions
module.exports = function () {
  return extend(clone(object({
    id: string(),
    resources: arrayOf(resource),
    aggregations: arrayOf(aggregation)
  }, ['id', 'resources', 'aggregations'])), {
    title: 'Service Resource Definition',
    description: 'Defines the resources, units, metering, accumulation, ' + 'aggregation and rating formulas used to meter a particular service'
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlLWRlZmluaXRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O0FBSWIsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUVoQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRXhDLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDdEIsSUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQzs7QUFFeEIsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDbkMsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDdkMsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDbkMsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7OztBQUdyQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUM7QUFDbEIsTUFBSSxFQUFFLE1BQU0sRUFBRTtBQUNkLGNBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDN0MsRUFBRSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDOzs7QUFHN0IsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQ3RCLE1BQUksRUFBRSxNQUFNLEVBQUU7QUFDZCxPQUFLLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztDQUNyQixFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzs7O0FBR2QsSUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7QUFDOUIsTUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztDQUNyQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7O0FBR2IsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDO0FBQ3pCLElBQUUsRUFBRSxNQUFNLEVBQUU7QUFDWixNQUFJLEVBQUUsTUFBTSxFQUFFO0FBQ2Qsa0JBQWdCLEVBQUUsZ0JBQWdCO0FBQ2xDLFNBQU8sRUFBRSxFQUFFO0FBQ1gsWUFBVSxFQUFFLEVBQUU7QUFDZCxXQUFTLEVBQUUsRUFBRTtBQUNiLE1BQUksRUFBRSxFQUFFO0NBQ1QsRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQzs7O0FBRzlCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7U0FBTSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUN2QyxNQUFFLEVBQUUsTUFBTSxFQUFFO0FBQ1osYUFBUyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDNUIsZ0JBQVksRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDO0dBQ25DLEVBQUUsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN4QyxTQUFLLEVBQUUsNkJBQTZCO0FBQ3BDLGVBQVcsRUFBRSx3REFBd0QsR0FDbkUsb0VBQW9FO0dBQ3ZFLENBQUM7Q0FBQSxDQUFDIiwiZmlsZSI6InNlcnZpY2UtZGVmaW5pdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gU2VydmljZSByZXNvdXJjZSBkZWZpbml0aW9uIHNjaGVtYVxuXG5jb25zdCBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG5jb25zdCBzY2hlbWEgPSByZXF1aXJlKCdhYmFjdXMtc2NoZW1hJyk7XG5cbmNvbnN0IGNsb25lID0gXy5jbG9uZTtcbmNvbnN0IGV4dGVuZCA9IF8uZXh0ZW5kO1xuXG5jb25zdCBzdHJpbmcgPSBzY2hlbWEudHlwZXMuc3RyaW5nO1xuY29uc3QgZW51bVR5cGUgPSBzY2hlbWEudHlwZXMuZW51bVR5cGU7XG5jb25zdCBvYmplY3QgPSBzY2hlbWEudHlwZXMub2JqZWN0O1xuY29uc3QgYXJyYXlPZiA9IHNjaGVtYS50eXBlcy5hcnJheU9mO1xuXG4vLyBVbml0IHNjaGVtYVxuY29uc3QgdW5pdCA9IG9iamVjdCh7XG4gIG5hbWU6IHN0cmluZygpLFxuICBxdWFudGl0eVR5cGU6IGVudW1UeXBlKFsnREVMVEEnLCAnQ1VSUkVOVCddKVxufSwgWyduYW1lJywgJ3F1YW50aXR5VHlwZSddKTtcblxuLy8gUmVzb3VyY2Ugc2NoZW1hXG5jb25zdCByZXNvdXJjZSA9IG9iamVjdCh7XG4gIG5hbWU6IHN0cmluZygpLFxuICB1bml0czogYXJyYXlPZih1bml0KVxufSwgWyd1bml0cyddKTtcblxuLy8gQWdncmVnYXRpb25Hcm91cCBzY2hlbWFcbmNvbnN0IGFnZ3JlZ2F0aW9uR3JvdXAgPSBvYmplY3Qoe1xuICBuYW1lOiBlbnVtVHlwZShbJ2RhaWx5JywgJ21vbnRobHknXSlcbn0sIFsnbmFtZSddKTtcblxuLy8gQWdncmVnYXRpb24gc2NoZW1hXG5jb25zdCBhZ2dyZWdhdGlvbiA9IG9iamVjdCh7XG4gIGlkOiBzdHJpbmcoKSxcbiAgdW5pdDogc3RyaW5nKCksXG4gIGFnZ3JlZ2F0aW9uR3JvdXA6IGFnZ3JlZ2F0aW9uR3JvdXAsXG4gIGZvcm11bGE6IHt9LFxuICBhY2N1bXVsYXRlOiB7fSxcbiAgYWdncmVnYXRlOiB7fSxcbiAgcmF0ZToge31cbn0sIFsnaWQnLCAndW5pdCcsICdmb3JtdWxhJ10pO1xuXG4vLyBFeHBvcnQgb3VyIHB1YmxpYyBmdW5jdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4gZXh0ZW5kKGNsb25lKG9iamVjdCh7XG4gICAgaWQ6IHN0cmluZygpLFxuICAgIHJlc291cmNlczogYXJyYXlPZihyZXNvdXJjZSksXG4gICAgYWdncmVnYXRpb25zOiBhcnJheU9mKGFnZ3JlZ2F0aW9uKVxuICB9LCBbJ2lkJywgJ3Jlc291cmNlcycsICdhZ2dyZWdhdGlvbnMnXSkpLCB7XG4gICAgdGl0bGU6ICdTZXJ2aWNlIFJlc291cmNlIERlZmluaXRpb24nLFxuICAgIGRlc2NyaXB0aW9uOiAnRGVmaW5lcyB0aGUgcmVzb3VyY2VzLCB1bml0cywgbWV0ZXJpbmcsIGFjY3VtdWxhdGlvbiwgJyArXG4gICAgICAnYWdncmVnYXRpb24gYW5kIHJhdGluZyBmb3JtdWxhcyB1c2VkIHRvIG1ldGVyIGEgcGFydGljdWxhciBzZXJ2aWNlJ1xuICB9KTtcblxuIl19